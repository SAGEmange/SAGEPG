"use client";
import React from "react";

function MainComponent() {
  const { data: user, loading, refetch } = useUser();
  const [activeTab, setActiveTab] = useState("profile");
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [formData, setFormData] = useState({
    penName: "",
    bio: "",
    theme: "dark",
    aiPersonality: "professional",
  });

  useEffect(() => {
    if (user) {
      setFormData({
        penName: user.penName || "",
        bio: user.bio || "",
        theme: user.theme || "dark",
        aiPersonality: user.aiPersonality || "professional",
      });
    }
  }, [user]);

  const handleSave = async (e) => {
    e.preventDefault();
    setSaving(true);
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch("/api/user/settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error("Failed to update settings");
      }

      await refetch();
      setSuccess("Settings updated successfully");
    } catch (err) {
      setError("Failed to update settings");
      console.error(err);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <i className="fa fa-spinner fa-spin text-4xl text-white"></i>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-white mb-4">Please sign in</h1>
          <a
            href="/account/signin"
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
          >
            Sign In
          </a>
        </div>
      </div>
    );
  }

  const tabs = [
    { id: "profile", name: "Profile", icon: "fa-user" },
    { id: "preferences", name: "Preferences", icon: "fa-cog" },
    { id: "library", name: "Library", icon: "fa-book" },
    { id: "downloads", name: "Downloads", icon: "fa-download" },
  ];

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">Account Settings</h1>
          <a
            href="/dashboard"
            className="bg-gray-800 text-white px-4 py-2 rounded hover:bg-gray-700"
          >
            <i className="fa fa-arrow-left mr-2"></i>
            Back to Dashboard
          </a>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-gray-800 rounded-lg p-4">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full text-left px-4 py-3 rounded mb-2 flex items-center ${
                  activeTab === tab.id ? "bg-blue-600" : "hover:bg-gray-700"
                }`}
              >
                <i className={`fa ${tab.icon} mr-3`}></i>
                {tab.name}
              </button>
            ))}
          </div>

          <div className="md:col-span-3 bg-gray-800 rounded-lg p-6">
            {error && (
              <div className="bg-red-500 bg-opacity-10 text-red-400 p-4 rounded-lg mb-4">
                {error}
              </div>
            )}
            {success && (
              <div className="bg-green-500 bg-opacity-10 text-green-400 p-4 rounded-lg mb-4">
                {success}
              </div>
            )}

            {activeTab === "profile" && (
              <form onSubmit={handleSave}>
                <div className="mb-6">
                  <label className="block text-gray-300 mb-2">Pen Name</label>
                  <input
                    type="text"
                    name="penName"
                    value={formData.penName}
                    onChange={(e) =>
                      setFormData({ ...formData, penName: e.target.value })
                    }
                    className="w-full bg-gray-700 border border-gray-600 rounded px-4 py-2"
                  />
                </div>
                <div className="mb-6">
                  <label className="block text-gray-300 mb-2">Bio</label>
                  <textarea
                    name="bio"
                    value={formData.bio}
                    onChange={(e) =>
                      setFormData({ ...formData, bio: e.target.value })
                    }
                    className="w-full bg-gray-700 border border-gray-600 rounded px-4 py-2 h-32"
                  />
                </div>
                <button
                  type="submit"
                  disabled={saving}
                  className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
                >
                  {saving ? "Saving..." : "Save Changes"}
                </button>
              </form>
            )}

            {activeTab === "preferences" && (
              <form onSubmit={handleSave}>
                <div className="mb-6">
                  <label className="block text-gray-300 mb-2">Theme</label>
                  <select
                    name="theme"
                    value={formData.theme}
                    onChange={(e) =>
                      setFormData({ ...formData, theme: e.target.value })
                    }
                    className="w-full bg-gray-700 border border-gray-600 rounded px-4 py-2"
                  >
                    <option value="dark">Dark</option>
                    <option value="light">Light</option>
                  </select>
                </div>
                <div className="mb-6">
                  <label className="block text-gray-300 mb-2">
                    AI Personality
                  </label>
                  <select
                    name="aiPersonality"
                    value={formData.aiPersonality}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        aiPersonality: e.target.value,
                      })
                    }
                    className="w-full bg-gray-700 border border-gray-600 rounded px-4 py-2"
                  >
                    <option value="professional">Professional</option>
                    <option value="friendly">Friendly</option>
                    <option value="creative">Creative</option>
                  </select>
                </div>
                <button
                  type="submit"
                  disabled={saving}
                  className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
                >
                  {saving ? "Saving..." : "Save Changes"}
                </button>
              </form>
            )}

            {activeTab === "library" && (
              <div>
                <h2 className="text-2xl font-bold mb-4">Your Stories</h2>
                {user.stories?.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {user.stories.map((story) => (
                      <div
                        key={story.id}
                        className="bg-gray-700 rounded-lg p-4"
                      >
                        <h3 className="text-xl font-bold mb-2">
                          {story.title}
                        </h3>
                        <div className="flex flex-wrap gap-2 mb-3">
                          {story.genre.map((g) => (
                            <span
                              key={g}
                              className="bg-gray-600 text-sm px-2 py-1 rounded"
                            >
                              {g}
                            </span>
                          ))}
                        </div>
                        <a
                          href="/"
                          className="text-blue-400 hover:text-blue-300"
                        >
                          <i className="fa fa-edit mr-2"></i>
                          Continue Writing
                        </a>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-400">
                    No stories in your library yet.
                  </p>
                )}
              </div>
            )}

            {activeTab === "downloads" && (
              <div>
                <h2 className="text-2xl font-bold mb-4">Download History</h2>
                {user.downloads?.length > 0 ? (
                  <div className="space-y-4">
                    {user.downloads.map((download) => (
                      <div
                        key={download.id}
                        className="bg-gray-700 rounded-lg p-4 flex justify-between items-center"
                      >
                        <div>
                          <h3 className="font-bold">{download.fileName}</h3>
                          <p className="text-gray-400 text-sm">
                            {new Date(download.date).toLocaleDateString()}
                          </p>
                        </div>
                        <button className="text-blue-400 hover:text-blue-300">
                          <i className="fa fa-download mr-2"></i>
                          Download Again
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-400">No download history.</p>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
